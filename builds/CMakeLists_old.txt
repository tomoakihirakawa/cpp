cmake_minimum_required(VERSION 3.11)

project(ProjectName LANGUAGES CXX)

# Define ANSI color codes if we're not on Windows
if(NOT WIN32)
  string(ASCII 27 Esc)
  set(ColorReset "${Esc}[m")
  set(ColorBold  "${Esc}[1m")
  set(Red        "${Esc}[31m")
  set(Green      "${Esc}[32m")
  set(Yellow     "${Esc}[33m")
  set(Blue       "${Esc}[34m")
  set(Magenta    "${Esc}[35m")
  set(Cyan       "${Esc}[36m")
  set(White      "${Esc}[37m")
  set(BoldRed    "${Esc}[1;31m")
  set(BoldGreen  "${Esc}[1;32m")
  set(BoldYellow "${Esc}[1;33m")
  set(BoldBlue   "${Esc}[1;34m")
  set(BoldMagenta "${Esc}[1;35m")
  set(BoldCyan   "${Esc}[1;36m")
  set(BoldWhite  "${Esc}[1;37m")
endif()

# Set up the compiler to use ccache if available
find_program(CCACHE_PROGRAM ccache)
if(CCACHE_PROGRAM)
  set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE "${CCACHE_PROGRAM}")
  message(STATUS "${Green}ccache is enabled${ColorReset}")
endif()

# Set default source file and output name
set(DEFAULT_SOURCE_FILE "main.cpp")
set(DEFAULT_OUTPUT_NAME "MyExecutable")

# Allow the source file and output name to be configurable through the command line
set(SOURCE_FILE ${DEFAULT_SOURCE_FILE} CACHE FILEPATH "Set the source file")
set(BASE_NAME ${DEFAULT_OUTPUT_NAME} CACHE STRING "Set the output file name")

message(STATUS "${Green}SOURCE_FILE is ${Magenta}${SOURCE_FILE}${ColorReset}")
message(STATUS "${Green}BASE_NAME is ${Magenta}${BASE_NAME}${ColorReset}")

# Create the executable target
add_executable(${BASE_NAME} ${SOURCE_FILE})

# Find and link LAPACK
find_package(LAPACK REQUIRED)
target_link_libraries(${BASE_NAME} PUBLIC ${LAPACK_LIBRARIES})

# Locate and link Eigen3
find_package(Eigen3 REQUIRED NO_MODULE)
target_link_libraries(${BASE_NAME} PUBLIC Eigen3::Eigen)

# Find and link CGAL
find_package(CGAL REQUIRED)
target_link_libraries(${BASE_NAME} PUBLIC CGAL::CGAL)

# Include directories
target_include_directories(${BASE_NAME} PUBLIC
  ${PROJECT_SOURCE_DIR}/../include
  ${PROJECT_SOURCE_DIR}/../../include
)

# Set C++ standard for the target
target_compile_features(${BASE_NAME} PRIVATE cxx_std_23)

# Compiler options
target_compile_options(${BASE_NAME} PRIVATE
  $<$<CONFIG:Debug>:-Og>
  $<$<CONFIG:Release>:
    -pthread
    -Ofast
    -march=native
    -flto
    -fopenmp
    -fconcepts
    -funroll-loops
    -Wunused-label
    -Wunused-value
    -fno-math-errno
    -funsafe-math-optimizations
    -fno-signed-zeros
    -fno-trapping-math>
)

# Check for linker capabilities, use gold or lld if available
include(CheckCXXCompilerFlag)
check_cxx_compiler_flag("-fuse-ld=gold" COMPILER_SUPPORTS_GOLD_LINKER)
if(COMPILER_SUPPORTS_GOLD_LINKER)
  target_link_options(${BASE_NAME} PRIVATE -fuse-ld=gold)
endif()

check_cxx_compiler_flag("-fuse-ld=lld" COMPILER_SUPPORTS_LLD_LINKER)
if(COMPILER_SUPPORTS_LLD_LINKER)
  target_link_options(${BASE_NAME} PRIVATE -fuse-ld=lld)
endif()

# Enable verbose makefile and export compile commands for use with various tools
set(CMAKE_VERBOSE_MAKEFILE ON)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
