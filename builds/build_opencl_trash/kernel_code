
void kernel add(global const int* v1,
		global const int* v2,
		global int* v3) {
  int ID = get_global_id(0);
  v3[ID] = v1[ID] + v2[ID];
};

void kernel add_looped_1(global const double* v1,
			 global const double* v2,
			 global double* v3, 
			 const int n,
			 const int k) {
  int ID = get_global_id(0);
  int NUM_GLOBAL_WITEMS = get_global_size(0);

  int ratio = (n / NUM_GLOBAL_WITEMS); // elements per thread
  int start = ratio * ID;
  int stop  = ratio * (ID+1);
  
  for (int j=start; j<stop; j++)
    for (int i=0; i<k; i++)
      v3[j] = v1[j] + v2[j] + i;  
};

void kernel add_looped_2(global const double* v1,
			 global const double* v2,
			 global double* v3,
			 const int n,
			 const int k) {
  int ID = get_global_id(0);
  int NUM_GLOBAL_WITEMS = get_global_size(0);
  int step = (n/* size of vector */ / NUM_GLOBAL_WITEMS/* working */);

  for (int j=ID; j<n; j+=step)      
    for (int i=0; i<k; i++)
      v3[j] = v1[j] + v2[j];
};

void kernel add_single(global const int* v1,
		       global const int* v2,
		       global int* v3, 
		       const int k) { 
  int ID = get_global_id(0);
  for (int i=0; i<k; i++)
    v3[ID] = v1[ID] + v2[ID];
};

